// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: grpc/reflection/v1alpha/reflection.proto

package reflectionv1alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ServerReflectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerReflectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerReflectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerReflectionRequestMultiError, or nil if none found.
func (m *ServerReflectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerReflectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	switch v := m.MessageRequest.(type) {
	case *ServerReflectionRequest_FileByFilename:
		if v == nil {
			err := ServerReflectionRequestValidationError{
				field:  "MessageRequest",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for FileByFilename
	case *ServerReflectionRequest_FileContainingSymbol:
		if v == nil {
			err := ServerReflectionRequestValidationError{
				field:  "MessageRequest",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for FileContainingSymbol
	case *ServerReflectionRequest_FileContainingExtension:
		if v == nil {
			err := ServerReflectionRequestValidationError{
				field:  "MessageRequest",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFileContainingExtension()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerReflectionRequestValidationError{
						field:  "FileContainingExtension",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerReflectionRequestValidationError{
						field:  "FileContainingExtension",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFileContainingExtension()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerReflectionRequestValidationError{
					field:  "FileContainingExtension",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerReflectionRequest_AllExtensionNumbersOfType:
		if v == nil {
			err := ServerReflectionRequestValidationError{
				field:  "MessageRequest",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for AllExtensionNumbersOfType
	case *ServerReflectionRequest_ListServices:
		if v == nil {
			err := ServerReflectionRequestValidationError{
				field:  "MessageRequest",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ListServices
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ServerReflectionRequestMultiError(errors)
	}

	return nil
}

// ServerReflectionRequestMultiError is an error wrapping multiple validation
// errors returned by ServerReflectionRequest.ValidateAll() if the designated
// constraints aren't met.
type ServerReflectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerReflectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerReflectionRequestMultiError) AllErrors() []error { return m }

// ServerReflectionRequestValidationError is the validation error returned by
// ServerReflectionRequest.Validate if the designated constraints aren't met.
type ServerReflectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerReflectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerReflectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerReflectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerReflectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerReflectionRequestValidationError) ErrorName() string {
	return "ServerReflectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServerReflectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerReflectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerReflectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerReflectionRequestValidationError{}

// Validate checks the field values on ExtensionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExtensionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtensionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExtensionRequestMultiError, or nil if none found.
func (m *ExtensionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtensionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContainingType

	// no validation rules for ExtensionNumber

	if len(errors) > 0 {
		return ExtensionRequestMultiError(errors)
	}

	return nil
}

// ExtensionRequestMultiError is an error wrapping multiple validation errors
// returned by ExtensionRequest.ValidateAll() if the designated constraints
// aren't met.
type ExtensionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtensionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtensionRequestMultiError) AllErrors() []error { return m }

// ExtensionRequestValidationError is the validation error returned by
// ExtensionRequest.Validate if the designated constraints aren't met.
type ExtensionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtensionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtensionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtensionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtensionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtensionRequestValidationError) ErrorName() string { return "ExtensionRequestValidationError" }

// Error satisfies the builtin error interface
func (e ExtensionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtensionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtensionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtensionRequestValidationError{}

// Validate checks the field values on ServerReflectionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerReflectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerReflectionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerReflectionResponseMultiError, or nil if none found.
func (m *ServerReflectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerReflectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ValidHost

	if all {
		switch v := interface{}(m.GetOriginalRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerReflectionResponseValidationError{
					field:  "OriginalRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerReflectionResponseValidationError{
					field:  "OriginalRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOriginalRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerReflectionResponseValidationError{
				field:  "OriginalRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.MessageResponse.(type) {
	case *ServerReflectionResponse_FileDescriptorResponse:
		if v == nil {
			err := ServerReflectionResponseValidationError{
				field:  "MessageResponse",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFileDescriptorResponse()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerReflectionResponseValidationError{
						field:  "FileDescriptorResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerReflectionResponseValidationError{
						field:  "FileDescriptorResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFileDescriptorResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerReflectionResponseValidationError{
					field:  "FileDescriptorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerReflectionResponse_AllExtensionNumbersResponse:
		if v == nil {
			err := ServerReflectionResponseValidationError{
				field:  "MessageResponse",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAllExtensionNumbersResponse()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerReflectionResponseValidationError{
						field:  "AllExtensionNumbersResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerReflectionResponseValidationError{
						field:  "AllExtensionNumbersResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAllExtensionNumbersResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerReflectionResponseValidationError{
					field:  "AllExtensionNumbersResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerReflectionResponse_ListServicesResponse:
		if v == nil {
			err := ServerReflectionResponseValidationError{
				field:  "MessageResponse",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetListServicesResponse()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerReflectionResponseValidationError{
						field:  "ListServicesResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerReflectionResponseValidationError{
						field:  "ListServicesResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListServicesResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerReflectionResponseValidationError{
					field:  "ListServicesResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerReflectionResponse_ErrorResponse:
		if v == nil {
			err := ServerReflectionResponseValidationError{
				field:  "MessageResponse",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetErrorResponse()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerReflectionResponseValidationError{
						field:  "ErrorResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerReflectionResponseValidationError{
						field:  "ErrorResponse",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetErrorResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerReflectionResponseValidationError{
					field:  "ErrorResponse",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ServerReflectionResponseMultiError(errors)
	}

	return nil
}

// ServerReflectionResponseMultiError is an error wrapping multiple validation
// errors returned by ServerReflectionResponse.ValidateAll() if the designated
// constraints aren't met.
type ServerReflectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerReflectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerReflectionResponseMultiError) AllErrors() []error { return m }

// ServerReflectionResponseValidationError is the validation error returned by
// ServerReflectionResponse.Validate if the designated constraints aren't met.
type ServerReflectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerReflectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerReflectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerReflectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerReflectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerReflectionResponseValidationError) ErrorName() string {
	return "ServerReflectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServerReflectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerReflectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerReflectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerReflectionResponseValidationError{}

// Validate checks the field values on FileDescriptorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileDescriptorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileDescriptorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileDescriptorResponseMultiError, or nil if none found.
func (m *FileDescriptorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FileDescriptorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FileDescriptorResponseMultiError(errors)
	}

	return nil
}

// FileDescriptorResponseMultiError is an error wrapping multiple validation
// errors returned by FileDescriptorResponse.ValidateAll() if the designated
// constraints aren't met.
type FileDescriptorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileDescriptorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileDescriptorResponseMultiError) AllErrors() []error { return m }

// FileDescriptorResponseValidationError is the validation error returned by
// FileDescriptorResponse.Validate if the designated constraints aren't met.
type FileDescriptorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileDescriptorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileDescriptorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileDescriptorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileDescriptorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileDescriptorResponseValidationError) ErrorName() string {
	return "FileDescriptorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FileDescriptorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileDescriptorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileDescriptorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileDescriptorResponseValidationError{}

// Validate checks the field values on ExtensionNumberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExtensionNumberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtensionNumberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExtensionNumberResponseMultiError, or nil if none found.
func (m *ExtensionNumberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtensionNumberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BaseTypeName

	if len(errors) > 0 {
		return ExtensionNumberResponseMultiError(errors)
	}

	return nil
}

// ExtensionNumberResponseMultiError is an error wrapping multiple validation
// errors returned by ExtensionNumberResponse.ValidateAll() if the designated
// constraints aren't met.
type ExtensionNumberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtensionNumberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtensionNumberResponseMultiError) AllErrors() []error { return m }

// ExtensionNumberResponseValidationError is the validation error returned by
// ExtensionNumberResponse.Validate if the designated constraints aren't met.
type ExtensionNumberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtensionNumberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtensionNumberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtensionNumberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtensionNumberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtensionNumberResponseValidationError) ErrorName() string {
	return "ExtensionNumberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExtensionNumberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtensionNumberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtensionNumberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtensionNumberResponseValidationError{}

// Validate checks the field values on ListServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServiceResponseMultiError, or nil if none found.
func (m *ListServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetService() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServiceResponseValidationError{
						field:  fmt.Sprintf("Service[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServiceResponseValidationError{
						field:  fmt.Sprintf("Service[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceResponseValidationError{
					field:  fmt.Sprintf("Service[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListServiceResponseMultiError(errors)
	}

	return nil
}

// ListServiceResponseMultiError is an error wrapping multiple validation
// errors returned by ListServiceResponse.ValidateAll() if the designated
// constraints aren't met.
type ListServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceResponseMultiError) AllErrors() []error { return m }

// ListServiceResponseValidationError is the validation error returned by
// ListServiceResponse.Validate if the designated constraints aren't met.
type ListServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceResponseValidationError) ErrorName() string {
	return "ListServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceResponseValidationError{}

// Validate checks the field values on ServiceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceResponseMultiError, or nil if none found.
func (m *ServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ServiceResponseMultiError(errors)
	}

	return nil
}

// ServiceResponseMultiError is an error wrapping multiple validation errors
// returned by ServiceResponse.ValidateAll() if the designated constraints
// aren't met.
type ServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceResponseMultiError) AllErrors() []error { return m }

// ServiceResponseValidationError is the validation error returned by
// ServiceResponse.Validate if the designated constraints aren't met.
type ServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceResponseValidationError) ErrorName() string { return "ServiceResponseValidationError" }

// Error satisfies the builtin error interface
func (e ServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceResponseValidationError{}

// Validate checks the field values on ErrorResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ErrorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ErrorResponseMultiError, or
// nil if none found.
func (m *ErrorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ErrorCode

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return ErrorResponseMultiError(errors)
	}

	return nil
}

// ErrorResponseMultiError is an error wrapping multiple validation errors
// returned by ErrorResponse.ValidateAll() if the designated constraints
// aren't met.
type ErrorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorResponseMultiError) AllErrors() []error { return m }

// ErrorResponseValidationError is the validation error returned by
// ErrorResponse.Validate if the designated constraints aren't met.
type ErrorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorResponseValidationError) ErrorName() string { return "ErrorResponseValidationError" }

// Error satisfies the builtin error interface
func (e ErrorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorResponseValidationError{}
